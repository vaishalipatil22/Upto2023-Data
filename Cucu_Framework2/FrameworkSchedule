
					********  Framework   **********			
	=============================================================================		
	Date:- 11.10.2023
	
	--> Automate URL:-"https://automationexercise.com/"
	--> Create BaseClass
			browser open using switch case
	--> Create Page Object Class
	--> Create StepDefinition
	--> TestRunner
	--> HTML Report(plugin)
	
	===============================================================================
	
	Date:-12.10.2023
	
	--> config.properties
			create a one config.properties file in project level..
			in properties file we can write the Key-Value pairs...
			for e.g. browser=chrome
						url= https://automationexercise.com/
						
			and read that file in Base class
			
			1. first we create the object of Properties class
							Properties prop = new Properties();
			2.To read the file we have to use the Java File reader and set the path of the properties file.
			 					File file = new File("properties file path"):
			3. now file is not in readable format then using FileInputStream we can read it.
			4. then create the object of FileInputStream and passing the instances of file.
								FileInputStream fis = new FileInputStream(file);
			5.Then we have to load the File into the properties using the load method.
								prop.load(fis)
IMPORTANT	6.Then raed that file using
								prop.getProperty(""); 
			first create a method 
					public void readConfig(){
					
					prop = new Properties();
					File file = new File("path of file");
					FileInputStream fis = new FileInputStream(file);

					try {
							prop.load(fis);
						} catch (IOException e) {
								e.printStackTrace();
						}

						}
					}
	
	  					prop.getProperty("  ");// read that file
	________________________________________________________________________________________
	--> Extent Reports
	
	________________________________________________________________________________________
	--> Spark reports
			Add Dependency
				<dependency>
				<groupId>tech.grasshopper</groupId>
				<artifactId>extentreports-cucumber7-adapter</artifactId>
				<version>1.14.0</version>
				</dependency>
				
		then create one file of extent.properties in project level
		and write 2 syntax line in extent.properties file..
			extent.reporter.spark.start=true
 			extent.reporter.spark.out=test-output/SparkReport/MySparkReport.html
 				[test-output - generate folder]
 				[SparkReport - generate a sparkReport folder under test-output folder]
 				[MySparkReport.html  -  actual report.html file]
 	__________________________________________________________________________________________
 						
	13.10.2023
	
	--> tags   ...done
	
	___________________________________________________________________________________________
	
	14.10.2023
	
	--> background keyword:-
		Background keyword used in cucumber to if it is any common step in multiple scenario we 
		mentions under the background keyword.
	______________________________________________________________________________________________ 
	--> Data driven Testing
		One of the most common ways to implement data driven testing with cucumber is to use 
		scenario outlines and examples. A scenario outline is a template that defines the steps
		of a scenario, but uses place holders for the data values. An example is a table that 
		provides the actual data values for each placeholder.
		
		eg.
		Scenario Outline: User enter Valid Credential..
			given:
			When:
			Then:
		Examples: 
			|username|password|
			|test@gmail.com|test@123|
			|test1@gmail.com|test@321|	
	_______________________________________________________________________________________________
	--> Data Table:-
		
			We Will pass the test data using the Data table and handle it using RAW() method..
			
			for e.g.:- 
			Scenario: Login with valid credential.
			Given user is on Home Page
			When user navigate to Login Page
			And User enter Credential to login
			|test@gmail.com|Test@123|
			Then message displayed login successfully
			
			//write the code to handle Data Table
			List<List<String>> data=usercredential.raw();
							or
			List<List<String>> data=usercredential.cells();
			
			//This is to get the first data of the set (First Row + First Column)
			driver.findElement(By.id("log")).sendKeys(dat.get(0).get(0));//test@gmail.com
			
			//This is to get the first data of the set (First Row + Second Column)
			driver.findElement(By.id("pwd")).sendKeys(dat.get(0).get(1));//Test@123
			
			driver.findElement(By.id("login")).click();
		_______________________________________________________________________________________
	
	--> Difference between Scenario Outline & Data Table..??
	
		Scenario Outline:
				1.This uses Example keyword to define the test data for the Scenario
				2.This works for the whole test
				3.Cucumber automatically run the complete test the number of times 
				  equal to the number of data in the Test Set
		Test Data:
				1.No keyword is used to define the test data
				2.This works only for the single step, below which it is defined
				3.A separate code needs to understand the test data and then it can be run 
				single or multiple times but again just for the single step, not for the complete test
	_________________________________________________________________________________________________
	
	--> Difference Between @Before and Background...???
	
	@Before Hook:-
		Before hooks will be run before the first of each scenario..
		use before when you have to do some technical setup before your scenarios.
		commonly used in starting a WebDriver,in setting up test data or browser cookies..
		
 	Background:-
 		A Background is run before each scenario,but after any before hooks..
 		use background when you provide customer readable pre-condition to your scenario..
 		commonly used for repetitive steps for e.g. navigating to login page
 		
 	_________________________________________________________________________________________________
 	
 	--> Hooks in Cucumber...??
 	
 		Hooks in Cucumber are special methods that allow you to perform actions before or after 
 		certain events in the test scenario life cycle. These events can include scenarios, steps, 
 		or even the entire feature.Hooks are useful for setting up preconditions, cleaning up 
 		after tests, and sharing state between steps.
 	
 		@Before: 
 				it is pre condition for all the scenario in feature file.
 		@After: 
 				It is post condition for all the scenario in feature file.
 				
 		@BeforeStep: 
 				It is pre condition for each step in feature file.
 		@AfterStep:
 				It is post condition for each step in feature file.
 	
 	__________________________________________________________________________________________________
 	
 	--> What is the order function in cucumber...???
 	
 			Cucumber executes Hooks in a certain order but there is a way to change the order 
 			of the execution according to the need for the test. @After(order = int): This runs in 
 			decrements order, which means the opposite of @Before. Value 1 would run first and 0 
 			would be after 1.
 			
 			for e.g. @Before(order=0)
 						@Before(order=1)
 						       //code
 						@After(order=1)
 						@After(order=0)
 						
 						
 		 Before hook execute in incremental order[means 1...2...3..] 
 		 After hook execute in decremental order [3..2...1..]
 		
 		_________________________________________________________________________________________
 		
 		--> how to take screenshots of failed test cases in Cucumber...??
 				
 				1. add dependency appche.common.io
 				2. first we create a Hooks class in a step_Definition package..
 				3.then create a one method to AddScreenshot
 				  for e.g. public void Addscreenshot(Scenario scenario)
 				  what is Scenario: Scenario is a class who knows all thing happen in framework 
 				  means if any scenario is fail or pass..
 				4. create the above method below the @AfterStep..
 				 	because the step will fail at any step so we use the @AfterStep 
 				 	[because this method execute after each step and if step failed then it capture screenshot]
 		        5.then we write under this method 
 		        	if(scenario.isFailed())
 		        	{
 		        			//write screenshot methods
 		        	}
 		        6. File srcfile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
 		            copy files to the desired location by using library "Apache commons IO fileutils"
 		            File destfile=new file("  ---  path of new file ---");
 		            FileUtils.copyfiles(srcfile,destfile);
 		            
 		         6. then extent.properties file write the path of to store a capture screenshots..
 					screenshot.dir=test-output/ExtentReport/Screenshots
					screenshot.rel.path=.//screenshots/
 					
 		
		_________________________________________________________________________________________
		
		--> How to run parallel test cases in Cucumber...???
		
		  1. Add dependency.
		  		A. TestNG Dependency
		  		B. Cucumber-TestNG Dependency
		  		
		  2.plugin
		  		A..maven-surefire-plugin
		  		
		  		<plugin>
   					 <groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-surefire-plugin</artifactId>
    						<version>2.22.0</version>
    							<configuration>
        								<parallel>methods</parallel>
        								<useUnlimitedThreads>true</useUnlimitedThreads>
    							</configuration>
				</plugin>
				
				B. maven-compiler-plugin
				
			3. Write code inside the testRunner Class..
			
			
					import org.testng.annotations.DataProvider;
					import io.cucumber.testng.AbstractTestNGCucumberTests;
					import io.cucumber.testng.CucumberOptions;
					
			package TestRunner;		
					@CucumberOptions(features = { "path of feature file" }, glue = {
										"com.StepDefinition" }, 
										dryRun = false, 
										monochrome = true,
										plugin={"reports"})
					
						public class RunCucumberTest extends AbstractTestNGCucumberTests{

   							 @Override
   							 @DataProvider(parallel = true)
   							 public Object[][] scenarios() {
        					return super.scenarios();
    					}
					}
		 					
		__________________________________________________________________________________________
		
		--> How to execute cucumber feature file in Parallel using TestNG ....????
		
		
		
		
		
		
		
		
		
		
		__________________________________________________________________________________________
		--> How to run failed Test cases in cucumber..???
		

 			we just add one plugin in runner class plugin as "rerun:target/rerun.text"
			then create second runner class and in that class we write under feature the path of 
			rerun.text file
			and also in plugin where we generate report generate a new report so we can easity trace it...
			[means cahnge the name of report folder in plugin]
			in rerun.text file we gwt the name of feature file and the failed line number
		
		____________________________________________________________________________________________
   				
	=================================================================================
	15.10.2023
	
	--> Hooks
		Before    After
	--> order function
	--> failure screenshot
	--> parallel execution
	--> How to run failed test cases
	
	******************************************************************************
	Proper Framework...[waits class,]
	git
	jenkins
	java program
	
	
	
	
	
	
	
	